const chat   = document.getElementById('chat');
const bar    = document.getElementById('file-bar');
const input  = document.getElementById('input');
const fileSel= document.getElementById('fileSel');

const sendB  = document.getElementById('send');
const clearB = document.getElementById('clear');
const checkB = document.getElementById('check');
const plusB  = document.getElementById('plus');
const minusB = document.getElementById('minus');
const attachB= document.getElementById('attach');

/* ---------- –∫–æ–Ω—Ñ–∏–≥ ---------- */
let fullCfg   = null;      // –≤–µ—Å—å config.json
let allTTS    = {};        // —Å—Å—ã–ª–∫–∞ –Ω–∞ fullCfg.tts
let ttsCfg    = null;      // –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
let curProvider = '';      // '' | 'OpenAI' | 'ElevenLabs'
let curVolume   = 1;       // 0-1 (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã!)
let currentAudio = null;

(async () => {
  const [cfg, menu] = await Promise.all([
    window.appConfig.get(),      // config.json
    window.ttsSettings.get()     // {provider, volume} –∏–∑ –º–µ–Ω—é
  ]);

  fullCfg = cfg;
  allTTS  = cfg.tts || {};

  /* –º–µ–Ω—é –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ config.tts.use */
  curProvider = menu.provider || (allTTS.use || '');
  curVolume   = (menu.volume !== undefined
                ? menu.volume
                : (allTTS.volume ?? 100)) / 100;

  selectProvider();              // –≤—ã—á–∏—Å–ª—è–µ–º ttsCfg
})();

let streamDiv=null, files=[];  // files = [{name,data}]
let codeFiles = []; 
let maxMsgs=0;

let chatInitialized = false;
let historyTries = 0;

let ollamaWaitTimer = null;

const TW={base:'https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/',folder:'assets/svg',ext:'.svg'};

// --- –≥—Ä–æ–º–∫–æ—Å—Ç—å TTS –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---------
ttsSettings.get().then(({provider,volume})=>{
  curVolume = volume/100;
  curProvider = provider;
  selectProvider();              // —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ
});

ttsSettings.onVolume(v => {
  curVolume = v / 100;
  if (currentAudio) currentAudio.volume = curVolume;
  console.log('curVolume: ', curVolume);
});
ttsSettings.onProvider(p=>{ curProvider=p; selectProvider(); });

function detectLanguage(name){
  const ext = name.split('.').pop().toLowerCase();
  const map = {
    js:'javascript', jsx:'javascript',
    ts:'typescript', tsx:'typescript',
    py:'python', php:'php', rb:'ruby',
    html:'html', css:'css', scss:'scss',
    json:'json', go:'go', rs:'rust',
    c:'c', h:'c', cpp:'cpp', hpp:'cpp',
    cs:'csharp', java:'java', kt:'kotlin',
    swift:'swift', sh:'bash', bat:'bat'
  };
  return map[ext] ?? 'text';
}

function selectProvider(){
  if (!curProvider){
    ttsCfg = null;                   // —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS
    return;
  }
  const source = allTTS[curProvider];
  if (!source){          // –≤–¥—Ä—É–≥ –º–µ–Ω—é –≤—ã–±—Ä–∞–ª–æ, –∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ—Ç
    ttsCfg = null;
    return;
  }
  ttsCfg = {...source, provider:curProvider};
  // –≥—Ä–æ–º–∫–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–æ–¥–ø—É–Ω–∫—Ç–µ:
  if (source.volume !== undefined) curVolume = source.volume/100;
}

// --- –∑–∞–∫–ª–∞–¥–∫–∏ --------------------------------------------------------------
const bookmarks = [];
const navUp   = document.getElementById('navUp');
const navDown = document.getElementById('navDown');
const playback= document.getElementById('playback');
const stopBtn = document.getElementById('stopBtn');

function updateNavState(){
  const y = chat.scrollTop;
  const up   = bookmarks.some(b => b.y <  y-4);
  const down = bookmarks.some(b => b.y >  y+4);
  navUp.disabled   = !up;
  navDown.disabled = !down;
  navUp.classList.toggle('enabled', up);
  navDown.classList.toggle('enabled', down);
}

chat.addEventListener('scroll', updateNavState);

navUp.addEventListener('click', () => {
  const y = chat.scrollTop;
  const target = [...bookmarks].reverse().find(b => b.y < y-4);
  if (target) chat.scrollTo({top: target.y-4, behavior:'smooth'});
});

navDown.addEventListener('click', () => {
  const y = chat.scrollTop;
  const target = bookmarks.find(b => b.y > y+4);
  if (target) chat.scrollTo({top: target.y-4, behavior:'smooth'});
});

// --- –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ --------------------------------------------------------
let currentUtter = null;

function currentAssistantElem(){
  const msgs = [...chat.querySelectorAll('.assistant')];
  const mid  = chat.getBoundingClientRect().top + chat.clientHeight/2;
  return msgs.find(m=>{
    const r = m.getBoundingClientRect();
    return r.top<=mid && r.bottom>=mid;
  }) || msgs[msgs.length-1];
}

function resetPlaybackBtn(){
  currentAudio = null;
  currentUtter = null;
  playback.textContent = 'üîä';
  renderEmoji(playback);
  stopBtn.style.display = 'none';
  notifyTray('stopped');
}

function setPlayBtn(icon, showStop = false){
  playback.textContent = icon;    // 'üîä' | '‚ñ∂' | '‚è∏'
  renderEmoji(playback);
  stopBtn.style.display = showStop ? 'block' : 'none';
}

function notifyTray(state){   // 'playing' | 'paused' | 'stopped'
  window.trayControl?.notify(state);
}

function splitByChunks(txt, size){
  if(!size || txt.length <= size) return [txt];

  const parts = [];
  const punct = /[.!?‚Ä¶]/g;             // –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

  while (txt.length > size){
    let cut = size;

    /* –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ size */
    punct.lastIndex = size;
    const p = punct.exec(txt);
    if (p){
      cut = p.index + 1;               // –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∞–º —Å–∏–º–≤–æ–ª
      /* –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ–±–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å */
      while (cut < txt.length && /\s/.test(txt[cut])) cut++;
    } else {
      /* –µ—Å–ª–∏ —Ç–æ—á–∫–∏ –Ω–µ—Ç ‚Üí —Ä–µ–∂–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –ø—Ä–æ–±–µ–ª–µ –ø–æ—Å–ª–µ size */
      const space = txt.indexOf(' ', size);
      cut = space !== -1 ? space + 1 : txt.length;
    }

    parts.push(txt.slice(0, cut).trim());
    txt = txt.slice(cut);
  }

  if (txt.length) parts.push(txt.trim());
  return parts;
}

async function speakOpenAI(text) {
  const parts = splitByChunks(text, ttsCfg.chunk || 0);
  let idx = 0;
  let preload = null; // { url, audio }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞
  async function fetchChunk(i) {
    if(i >= parts.length) return null;
    const res = await fetch('https://api.openai.com/v1/audio/speech', {
      method:'POST',
      headers:{
        'Content-Type':'application/json',
        'Authorization':`Bearer ${ttsCfg.token}`
      },
      body:JSON.stringify({
        model: ttsCfg.model || 'gpt-4o-mini-tts',
        input: parts[i],
        voice: ttsCfg.voice || 'shimmer',
        format:'wav',
        speed: ttsCfg.speed || 1.0
      })
    });
    const buf = await res.arrayBuffer();
    const blob = new Blob([buf], {type:'audio/wav'});
    const url  = URL.createObjectURL(blob);
    const audio = new Audio(url);
    audio.volume = curVolume;
    return { url, audio };
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
  async function playNext() {
    if(idx >= parts.length) { resetPlaybackBtn(); return; }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫ ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if(!preload) preload = await fetchChunk(idx);

    notifyTray('playing');
    currentAudio = preload.audio;

    // –ù–∞—á–∏–Ω–∞–µ–º –≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –∑–∞—Ä–∞–Ω–µ–µ
    const preloadNextPromise = fetchChunk(idx + 1);

    // –°—Ç–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    currentAudio.addEventListener('ended', async () => {
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º blob
      URL.revokeObjectURL(preload.url);

      idx++;
      preload = await preloadNextPromise;
      playNext();
    }, {once:true});
    currentAudio.addEventListener('error', resetPlaybackBtn, {once:true});
    await currentAudio.play();
  }

  playNext();
}

async function speakElevenLabs(text){
  const chunkSize = ttsCfg.chunk || 0;
  const parts = splitByChunks(text, chunkSize);
  let idx = 0;

  async function playNext(){
    if (idx >= parts.length){ resetPlaybackBtn(); return; }

    try{
      const res = await fetch(
        `https://api.elevenlabs.io/v1/text-to-speech/${ttsCfg.voice}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'xi-api-key':   ttsCfg.token
        },
        body: JSON.stringify({
          text:      parts[idx],
          model_id:  ttsCfg.model || 'eleven_flash_v2_5',
          voice_settings: {stability: 0.4, similarity_boost: 0.7, speed: ttsCfg.speed || 1.0}
        })
      });

      if (!res.ok){                         // ‚Üê –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        throw new Error(`ElevenLabs HTTP ${res.status}`);
      }

      const buf  = await res.arrayBuffer();
      const blob = new Blob([buf], {type:'audio/mpeg'});
      const url  = URL.createObjectURL(blob);
      const au   = new Audio(url);
      au.volume = curVolume;
      currentAudio = au;

      au.addEventListener('ended', () => { idx++; playNext(); }, {once:true});
      au.addEventListener('error',  resetPlaybackBtn,            {once:true});
      await au.play();

    }catch(err){
      console.error('ElevenLabs TTS error:', err);
      resetPlaybackBtn();
    }
  }
  playNext();
}

// --- –≤—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã -------------------------------------------------------
// input - –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤—ã—à–µ
// const micBtn  = document.getElementById('micBtn');

// --- Speech Recognition ------------------------------------------------------
let recognition      = null;
let recognizing      = false;

if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window){
  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
  recognition            = new SR();
  recognition.lang       = 'ru-RU';     // —è–∑—ã–∫ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å
  recognition.continuous = true;
  recognition.interimResults = true;

  recognition.onresult = e => {
    let chunk = '';
    for (let i = e.resultIndex; i < e.results.length; ++i){
      chunk += e.results[i][0].transcript;
    }
    input.value += (input.value && !input.value.endsWith(' ')?' ':'') + chunk.trim();
  };

  // –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
  recognition.onend = () => { if (recognizing) recognition.start(); };
  //
  recognition.onerror  = e => console.error('SR error:', e.error);
  recognition.onstart  = () => console.log('SR started');
  recognition.onspeechend = () => console.log('speech end');
}

// --- —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ------------------------------------------------------
// function startRec(){
//   if (!recognition) return;
//   recognizing = true;
//   micBtn.classList.add('active');
//   recognition.start();
// }
// function stopRec(){
//   if (!recognition) return;
//   recognizing = false;
//   micBtn.classList.remove('active');
//   recognition.stop();
// }
// micBtn.addEventListener('click', () => recognizing ? stopRec() : startRec());

// --- –≥–ª—É—à–∏–º –¥–∏–∫—Ç–æ–≤–∫—É –ø—Ä–∏ –õ–Æ–ë–û–ô –æ—Ç–ø—Ä–∞–≤–∫–µ --------------------------------------
// const _send = send;              // —Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// window.send = function(){
//   if (recognizing) stopRec();
//   return _send.apply(this, arguments);
// };

playback.addEventListener('click', async () => {
  const selected = (window.getSelection()?.toString() || '').trim();

  /* --- –≤–Ω–µ—à–Ω–∏–π TTS (OpenAI / ElevenLabs) ---------------------------------- */
  if (ttsCfg && (ttsCfg.provider === 'OpenAI' || ttsCfg.provider === 'ElevenLabs')) {
    if (currentAudio) {
      currentAudio.volume = curVolume; 
      if (currentAudio.paused){ await currentAudio.play(); setPlayBtn('‚è∏', true); notifyTray('playing'); }
      else                   { currentAudio.pause();       setPlayBtn('‚ñ∂', true); notifyTray('paused'); }
      return;
    }

    const text = selected || (currentAssistantElem()?.innerText || '');
    if(!text) return;

    setPlayBtn('‚è∏', true);
    notifyTray('playing');
    if (ttsCfg.provider === 'OpenAI') speakOpenAI(text);
    else                              speakElevenLabs(text);
    return;
  }

  /* ‚îÄ‚îÄ‚îÄ SpeechSynthesis ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  /* 1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –∏–¥—É—â–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º (–ø–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ) */
  if (currentUtter) {
    if (speechSynthesis.paused) {          // ‚ñ∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      speechSynthesis.resume();
      setPlayBtn('‚è∏', true);
      notifyTray('playing');
    } else {                               // ‚ùö‚ùö –ø–∞—É–∑–∞
      speechSynthesis.pause();
      setPlayBtn('‚ñ∂', true);
      notifyTray('paused');
    }
    return;
  }

  /* 2. –ó–∞–ø—É—Å–∫ –æ–∑–≤—É—á–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç */
  if (selected) {
    const u = new SpeechSynthesisUtterance(selected);
    u.volume = curVolume;
    currentUtter = u;
    setPlayBtn('‚è∏', true);
    notifyTray('playing');
    u.onend = u.onerror = resetPlaybackBtn;
    speechSynthesis.speak(u);
    return;
  }

  /* 3. –ó–∞–ø—É—Å–∫ –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ä–µ–ø–ª–∏–∫–∏ */
  const msg = currentAssistantElem();
  if (!msg) return;

  const u = new SpeechSynthesisUtterance(msg.innerText);
  u.volume = curVolume;
  currentUtter = u;
  setPlayBtn('‚è∏', true);
  notifyTray('playing');
  u.onend = u.onerror = resetPlaybackBtn;
  speechSynthesis.speak(u);
});

stopBtn.addEventListener('click', ()=>{
  if(currentAudio){ currentAudio.pause(); notifyTray('paused'); currentAudio=null; }
  speechSynthesis.cancel();
  currentUtter=null;
  playback.textContent='üîä';
  stopBtn.style.display='none';
  renderEmoji(playback);
});

// --- –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏-–∑–∞–∫–ª–∞–¥–∫–∏ –≤ –∫–∞–∂–¥—É—é AI-—Ä–µ–ø–ª–∏–∫—É --------------------------
function attachBookmark(msgEl){
  const dot = document.createElement('button');
  dot.className = 'bookmark-btn';
  msgEl.style.position='relative';
  msgEl.appendChild(dot);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const charCount = msgEl.textContent ? msgEl.textContent.length : 0;

  if(charCount > 0) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
    const charCountElement = document.createElement('span');
    charCountElement.classList.add('char-count'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    charCountElement.textContent = charCount;

    // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ bookmark-btn
    msgEl.appendChild(charCountElement);
  }

  dot.addEventListener('click', ()=>{
    const active = dot.classList.toggle('active');
    if(active){
      bookmarks.push({elem:msgEl, y:msgEl.offsetTop});
      bookmarks.sort((a,b)=>a.y-b.y);
    }else{
      const i = bookmarks.findIndex(b=>b.elem===msgEl);
      if(i>-1) bookmarks.splice(i,1);
    }
    updateNavState();
  });
}

// --- twemoji helper ---------------------------------------------------------
function renderEmoji(node){
  if(window.twemoji) twemoji.parse(node,TW);
}

// —Å—Ä–∞–∑—É –ø—Ä–æ—Ä–∏—Å—É–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
renderEmoji(document.getElementById('nav'));
// —Å—Ä–∞–∑—É –ø—Ä–æ—Ä–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
// setInterval(() => {
//       renderEmoji(document.getElementById('micBtn'));
// }, 1500);
//renderEmoji(document.getElementById('input-bar'));

function hideUserCode(root){
  const mkIcon = f => `<span class="file-icon" title="${f.filename}">üìÑ</span>`;
  let html = root.innerHTML;

  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π ```startcode –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π ```endcode
  const start = html.indexOf('```startcode');
  const end   = html.lastIndexOf('```endcode');

  if (start !== -1 && end !== -1 && end > start) {
    let codeBlock = html.slice(start + 12, end);
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Å–∫–∏ "filename": "..."
    let files = [];
    // –ì—Ä—É–±—ã–π –ø–∞—Ä—Å–µ—Ä: –∏—â–µ—Ç –≤—Å–µ filename –≤ —Ç–µ–∫—Å—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Å—ë –º–µ–∂–¥—É –Ω–∏–º–∏
    codeBlock.replace(/"filename"\s*:\s*"([^"]+)"/g, (match, fname) => {
      files.push({filename: fname});
    });

    // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–∞ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–∏)
    if (files.length) {
      html = html.slice(0, start) + files.map(mkIcon).join(' ') + html.slice(end + 11); // 11 = –¥–ª–∏–Ω–∞ '```endcode'
      root.innerHTML = html;
    }
    return;
  }
  // –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–µ –º–µ–Ω—è–µ–º
}

function decodeHTMLEntities(str){
  const txt = document.createElement('textarea');
  txt.innerHTML = str;
  return txt.value;
}

// –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π markdown-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ/–∫—É—Ä—Å–∏–≤–∞/–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤/—Å—Å—ã–ª–æ–∫
function simpleMarkdownToHtml(md) {
  // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ <main ...>...</main>
  const codeBlocks = [];
  md = md.replace(/<main[^>]*>[\s\S]*?<\/main>/gi, function(m) {
    codeBlocks.push(m);
    return `\uFFF7main${codeBlocks.length-1}\uFFF8`; // –°–ø–µ—Ü-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
  });

  // 2. –î–µ–ª–∞–µ–º markdown —Ç–æ–ª—å–∫–æ –ø–æ –æ—Å—Ç–∞–ª—å–Ω–æ–º—É
  md = md
    .replace(/^### (.*)$/gm, '<h3>$1</h3>')
    .replace(/^## (.*)$/gm, '<h2>$1</h2>')
    .replace(/^# (.*)$/gm, '<h1>$1</h1>')
    .replace(/\*\*([\s\S]+?)\*\*/g, '<b>$1</b>')
    .replace(/^\* (.+)$/gm, '<span class="md-bullet">$1</span>')
    .replace(/(^|[^`])`([^`\n\r]+?)`(?!`)/g, '$1<span class="inline-code">$2</span>')
    .replace(/\*([^\n\r*]+?)\*/g, '<i>$1</i>')
    .replace(/\[([^\]]+)\]\(([^\)]+)\)/g, '<a href="$2" target="_blank">$1</a>')
    .replace(/^- (.*)$/gm, '<li>$1</li>')
    .replace(/\n{2,}/g, '<br><br>');

  // 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º <main ...>...</main>
  md = md.replace(/\uFFF7main(\d+)\uFFF8/g, (m, i) => codeBlocks[+i]);

  return md;
}

function enhanceCodeBlocks(root){
  const html = root.innerHTML;
  // –ì–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω ‚Äî –ª–æ–≤–∏—Ç –º–Ω–æ–≥–æ –±–ª–æ–∫–æ–≤, –∫–æ–Ω–µ—Ü: ``` + —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã/–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏/—Ñ–∞–π–ª–∞
  const re = /```([a-zA-Z0-9#+.\-]*)\n([\s\S]*?)```[\s]*((?=\n)|$)/gm;

  let last = 0;
  const parts = [];
  let m;

  while((m = re.exec(html))){
    if(m.index > last){
      parts.push({type:'html', content: html.slice(last, m.index)});
    }
    parts.push({
      type : 'code',
      lang : (m[1] || 'code').toLowerCase(),
      text : decodeHTMLEntities(m[2])
    });
    last = re.lastIndex;
  }
  if(last < html.length) parts.push({type:'html', content: html.slice(last)});

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–±–æ—Ä–∫–∞
  root.innerHTML = '';
  for(const p of parts){
    if(p.type === 'html'){
      // markdown —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∫–æ–¥–∞
      const tmp = document.createElement('div');
      tmp.innerHTML = p.content;
      //tmp.innerHTML = simpleMarkdownToHtml(p.content);
      tmp.childNodes.forEach(n=>root.appendChild(n));
    }else{
      const wrapper = document.createElement('main');
      wrapper.className = 'code-box';

      const header = document.createElement('div');
      header.className = 'code-header';
      header.innerHTML = `<span>${p.lang}</span><button>copy</button>`;

      // const btn = header.querySelector('button');
      // btn.onclick = ()=> {
      //   navigator.clipboard.writeText(p.text);
      //   let hint = document.createElement('span');
      //   hint.textContent  = 'stored to clipboard';
      //   hint.className = 'copy-hint';
      //   btn.parentElement.appendChild(hint);
      //   setTimeout(()=>hint.remove(), 1300);
      // };

      const pre  = document.createElement('pre');
      const code = document.createElement('code');
      code.className = 'language-' + p.lang;
      code.textContent  = p.text;
      pre.appendChild(code);

      wrapper.append(header, pre);
      root.appendChild(wrapper);
    }
  }
  root.innerHTML = simpleMarkdownToHtml(root.innerHTML);
  if (!root._copyDelegated) {
    root.addEventListener('click', function(e){
      if(e.target.tagName === 'BUTTON' && e.target.textContent === 'copy'){
        const codeBox = e.target.closest('.code-box');
        const code    = codeBox && codeBox.querySelector('pre code');
        if(code){
          navigator.clipboard.writeText(code.textContent);
          let hint = document.createElement('span');
          hint.textContent  = 'stored to clipboard';
          hint.className = 'copy-hint';
          e.target.parentElement.appendChild(hint);
          setTimeout(()=>hint.remove(), 1300);
        }
      }
    });
    root._copyDelegated = true;
  }
}

/* helpers */
function add(txt='',cls='system'){
  const d=document.createElement('div');
  d.className='msg '+cls;
  if(cls==='assistant') {
    d.innerHTML=txt;
    enhanceCodeBlocks(d);
    attachBookmark(d); // –≤—ã–∑–æ–≤ attachBookmark
  } else if(cls==='user') {
    d.textContent=txt
    hideUserCode(d);
  } else {
    d.innerHTML=txt;
  }
  renderEmoji(d);
  chat.appendChild(d);
  chat.scrollTop=chat.scrollHeight;
  trim();
  return d;
}
function trim(){
  if(maxMsgs<=0)return;
  let pairs=0;
  [...chat.children].forEach(c=>{ if(c.classList.contains('assistant')) pairs++; });
  while(pairs>maxMsgs){
    chat.removeChild(chat.firstChild); chat.removeChild(chat.firstChild); pairs--;
  }
}
function refreshBar(){
  bar.innerHTML='';
  if(!files.length && !codeFiles.length){ bar.style.display='none'; return; }
  bar.style.display='flex';
  files.forEach((f,i)=>{
    const div=document.createElement('div');
    div.className='file-item'; div.textContent=f.name;
    const x=document.createElement('button'); x.textContent='‚úï';
    x.onclick=()=>{ files.splice(i,1); refreshBar(); };
    div.appendChild(x); bar.appendChild(div);
  });
  codeFiles.forEach((f,i)=>{
    const div=document.createElement('div');
    div.className='file-item'; div.textContent=f.filename;
    const x=document.createElement('button'); x.textContent='‚úï';
    x.onclick=()=>{ codeFiles.splice(i,1); refreshBar(); };
    div.appendChild(x); bar.appendChild(div);
  });
}

/* config */
let fontTries = 0;
function ensureFontConfig() {
  const sz = getComputedStyle(document.documentElement).getPropertyValue('--chat-font');
  if (!sz || sz === '0.7rem') { // –µ—Å–ª–∏ —É–º–æ–ª—á–∞–Ω–∏–µ, –∞ –Ω–µ —Ç–≤–æ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    fontTries++;
    if (fontTries < 4) setTimeout(window.api.check, 250); // –µ—â—ë —Ä–∞–∑ —Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
  }
  renderEmoji(document.getElementById('nav'));
}

window.api.onCfg(c => {
  //console.log("try to log:");
  document.documentElement.style.setProperty('--chat-font', c.chat_font || '0.7rem');
  document.documentElement.style.setProperty('--input-font', c.input_font || '0.7rem');
  maxMsgs = c.history_max_messages || 0;
  ensureFontConfig(); // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 1 —Ç–∏–∫
});

setTimeout(ensureFontConfig, 1000);
//window.api.check();

//console.log("try to log2:");

/* history */
window.api.onHist(arr => {
  chatInitialized = true;  // <- –¥–∞–∂–µ –µ—Å–ª–∏ arr.length === 0 (—Ñ–∞–π–ª–∞ –Ω–µ –±—ã–ª–æ ‚Äî –≤—Å—ë –æ–∫)
  // —É–¥–∞–ª–∏—Ç—å "Initializing‚Ä¶" –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  if(chat.firstChild && chat.firstChild.className && chat.firstChild.className.includes('system') && chat.firstChild.textContent.includes('Initializing')) {
    chat.removeChild(chat.firstChild);
  }
  arr.forEach(e=>{ add(e.user,'user'); add(e.ai,'assistant'); });
  setTimeout(()=>{
    renderEmoji(chat);
    trim();
    chat.scrollTop = chat.scrollHeight;
  },50);
});

let tryInitLoopTimeout = null;
function tryInitLoop() {
  if (!chatInitialized && historyTries < 5) {
    historyTries++;
    window.api.check();
    tryInitLoopTimeout = setTimeout(tryInitLoop, 5000);
  }
}
// –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
tryInitLoopTimeout = setTimeout(tryInitLoop, 5000);
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã
function cancelInitLoop() {
  if (tryInitLoopTimeout) {
    clearTimeout(tryInitLoopTimeout);
    tryInitLoopTimeout = null;
  }
}

/* send */
function send(){
  let text = input.value.trim();
  if(!text && !files.length) return;

  const chatImageEmoji = 'üñºÔ∏è ';
  if (files.length) {
    text = `${chatImageEmoji}${text}`;
  }

  if(codeFiles.length) {
    text = '```startcode\n' + JSON.stringify(codeFiles, null, 2) + '\n```endcode\n\n' + text;
  }

  add(text||'<img>','user'); // —Ç—É—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –≤ –ª–µ–Ω—Ç—É —á–∞—Ç–∞
  input.value=''; input.scrollTop=0; input.setSelectionRange(0,0);  // ‚Üê –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ

  streamDiv=add('','assistant');
  window.api.send({ text, images: files.map(f=>f.data) });
  files=[]; codeFiles=[]; refreshBar();
  if (recognizing) stopRec();
}
sendB.onclick=send;
/* ----- send –ø–æ Enter ----- */
input.addEventListener('keydown', e => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    send();
  }
  // –ï—Å–ª–∏ Shift+Enter ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
});

/* streaming */
window.api.onChunk(t => {
  if (streamDiv){
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, ¬´–æ–∫–Ω–æ¬ª –ª–∏ –º—ã —É –Ω–∏–∑–∞ (‚â§ ~40 px)
    const atBottom = chat.scrollHeight - chat.scrollTop - chat.clientHeight < 40;

    streamDiv.textContent += t;

    if (atBottom){
      chat.scrollTop = chat.scrollHeight;   // —Å–∫—Ä–æ–ª–ª–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –±—ã–ª–∏ –≤–Ω–∏–∑—É
    }
  }
});
window.api.onDone(() => {
  chat.scrollTop = chat.scrollHeight;
  enhanceCodeBlocks(streamDiv);
  attachBookmark(streamDiv);
  renderEmoji(streamDiv);
  updateNavState();
});

/* attach */
attachB.onclick=()=>fileSel.click();
fileSel.onchange=async e=>{
  for(const f of [...e.target.files]){
    if(f.type.startsWith('image/')){
      const data=await new Promise(r=>{
        const fr=new FileReader();
        fr.onload=()=>r(fr.result.split(',')[1]); fr.readAsDataURL(f);
      });
      files.push({name:f.name,data});
    }else{
      await addCodeFile(f);     // –Ω–æ–≤–æ–µ
    }
  }
  fileSel.value=''; refreshBar();
};

async function addCodeFile(file){
  const text = await file.text();
  codeFiles.push({
    language : detectLanguage(file.name),
    filename : file.name,
    code     : text.replace(/"/g,'\\"')   // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
  });
  refreshBar();
}

/* clear */
clearB.onclick=()=>{ chat.innerHTML=''; streamDiv=null; };

/* font +/- */
function adj(d){ const s=parseFloat(getComputedStyle(chat).fontSize);
  const n=Math.max(10,s+d); chat.style.fontSize=n+'px'; input.style.fontSize=n+'px'; }
plusB.onclick =()=>adj( 2); minusB.onclick=()=>adj(-2);

function stopOWTimer() {
  if (ollamaWaitTimer) {
    clearInterval(ollamaWaitTimer);
    ollamaWaitTimer = null;
  }
}

/* misc UI */
checkB.onclick=()=>{ add('‚è≥ Checking Ollama‚Ä¶'); window.api.check(); };
window.api.onError(e=>add('‚ö†Ô∏è '+e));
// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "not running, waiting..." –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
window.api.onOff(() => {
  //console.log('offline');
  add('‚ö†Ô∏è Ollama not running, waiting...');
  if (!ollamaWaitTimer) {
    ollamaWaitTimer = setInterval(() => {
      window.api.check(); // –¥–µ—Ä–≥–∞–µ—Ç main.js (prepare), –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–æ–≤–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    }, 5000);
  }
});
// –ö–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å "Ollama ready!" ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
window.api.onReady(() => {
  stopOWTimer();
  add('‚úÖ Ollama ready!');
  //lock(false);
  input.focus();
});

window.api.onWrong(() => {
  cancelInitLoop();
  stopOWTimer();
  add('‚ö†Ô∏è Ollama model wrong! Exit, change and start once more...');
});

window.trayControl?.onCmd(cmd=>{
  if(cmd==='play' ) playback.click();
  if(cmd==='pause') playback.click();
  if(cmd==='stop' ) stopBtn.click();
});

add('‚è≥ Initializing‚Ä¶');
